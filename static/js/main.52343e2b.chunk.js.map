{"version":3,"sources":["components/NavBar/NavBar.js","components/Search/Search.js","components/Wrapper/Wrapper.js","SearchContainer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","id","bg","src","className","alt","React","Component","Search","props","Container","Row","Col","value","search","onChange","handleInputChange","type","name","placeholder","Wrapper","children","SearchContainer","searchEmployees","event","results","target","setState","state","list","Employees","filter","data","toLowerCase","includes","occupation","map","key","image","age","this","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wvGA6BeA,G,6KAhBP,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,GAAG,QAE3B,yBACQC,IAAI,6EAEJC,UAAU,cACVC,IAAI,uB,GAdCC,IAAMC,Y,gCCiCZC,EA/BD,SAACC,GAEP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,8BACI,+DAEJ,2BACYC,MAAOJ,EAAMK,OACbC,SAAUN,EAAMO,kBAChBC,KAAK,OACLC,KAAK,OACLC,YAAY,aAM5B,kBAACP,EAAA,EAAD,S,MCrBLQ,MAJf,SAAiBX,GACf,OAAO,yBAAKL,UAAU,WAAWK,EAAMY,W,QC6E1BC,G,wDAzEX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAQVc,gBAAkB,SAACC,GACf,IAAIC,EAAUD,EAAME,OAAOb,MAC3B,EAAKc,SAAS,CAAEb,OAAQW,KARxB,EAAKG,MAAQ,CACTd,OAAQ,MAJG,E,qDAgCT,IAAD,OACCe,EAAOC,EAAUC,QAAO,SAACC,GAC3B,OAA0B,OAAtB,EAAKJ,MAAMd,QAEJkB,EAAKd,KAAKe,cAAcC,SAAS,EAAKN,MAAMd,OAAOmB,gBAAkBD,EAAKG,WAAWF,cAAcC,SAAS,EAAKN,MAAMd,OAAOmB,eAD9HD,OACJ,KAGRI,KAAI,SAACJ,GACJ,OACI,yBAAKK,IAAKL,EAAK/B,GAAIG,UAAU,QAC7B,yBAAKA,UAAU,iBACb,yBAAKC,IAAK2B,EAAKd,KAAMf,IAAK6B,EAAKM,SAEjC,yBAAKlC,UAAU,WACb,4BACE,4BACE,yCADF,IAC0B4B,EAAKd,MAE/B,4BACE,wCADF,IACyBc,EAAKO,KAE9B,4BACE,+CADF,IACgCP,EAAKG,kBAQjD,OACI,oCACI,kBAAC,EAAD,CAAQE,IAAKG,KAAKZ,MAAM3B,GAAIY,MAAO2B,KAAKZ,MAAMd,OAAQE,kBAAoBwB,KAAKjB,kBAC/E,kBAAC,EAAD,KACKM,Q,GAnEStB,cCefkC,E,uKAVX,OACE,oCACE,kBAAE,EAAF,MACA,kBAAC,EAAD,W,GATUlC,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52343e2b.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\"\n// import Row from \"react-bootstrap/Row\"\n// import Col from \"react-bootstrap/Col\"\nimport \"./NavBar.css\"\n\nclass NavBar extends React.Component {\n    // constructor(props) {\n    //     super(props);\n\n    // }\n\n    render() {\n        return (\n            <Navbar id=\"navBar\" bg=\"dark\"  >\n            \n        <img\n                src=\"https://fontmeme.com/permalink/200715/525a5cac62bec2e4cf7ceb3b80042fe2.png\"\n                \n                className=\"headerImage\"\n                alt=\"Simpsons logo\"\n              />\n            \n          </Navbar>\n\n        )\n    }\n}\n\nexport default NavBar;","import React from \"react\";\nimport Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n// import employees from \"./employees.json\"\n\n\n\nconst Search =(props) => {\n\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <form>\n                            <label>\n                                Search By Name or Occupation:\n                        <input\n                                    value={props.search}\n                                    onChange={props.handleInputChange}\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Homer\">\n                                </input>\n                            </label>\n\n                        </form>\n                    </Col>\n                    <Col>\n\n                    </Col>\n                </Row>\n            </Container>\n\n        );\n    }\n\n\n\nexport default Search;\n\n// constructor(props) {\n//     super(props);\n\n//     // this.handleSubmit = this.handleSubmit.bind(this);\n\n//     this.state = {\n//         name: \"\"\n//     };\n// };\n\n// handleInputChange = (event) => {\n//     const { name, value } = event.target\n\n//     this.setState({\n//         [name]: value\n//     });\n// }\n\n// handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     this.setState({\n//         name: \"\"\n//     })\n// }","import React from \"react\";\nimport \"./Wrapper.css\"\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Search from \"./components/Search/Search\";\nimport Wrapper from \"./components/Wrapper/Wrapper\"\n// import EmployeeCard from \"./components/EmployeeCard/EmployeeCard\";\nimport Employees from \"./employees.json\"\nimport \"./components/SearchContainer/SearchContainer.css\"\n\nclass SearchContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            search: null\n        };\n\n    };\n\n    searchEmployees = (event) => {\n        let results = event.target.value;\n        this.setState({ search: results })\n    };\n\n    // handleInputChange = event => {\n    //     const { name, value } = event.target;\n\n    //     this.setState({\n    //         [name]: value\n    //     });\n    // };\n\n    // handleFormSubmit = event => {\n    //     event.preventDefault();\n\n    //     this.searchEmployees();\n    // };\n\n    // componentDidMount() {\n    //     this.searchEmployees();\n    // };\n\n    render() {\n        const list = Employees.filter((data) => {\n            if (this.state.search === null) {\n                return data\n            } else if (data.name.toLowerCase().includes(this.state.search.toLowerCase()) || data.occupation.toLowerCase().includes(this.state.search.toLowerCase())) {\n                return data\n            }\n        }).map((data) => {\n            return (\n                <div key={data.id} className=\"card\">\n                <div className=\"img-container\">\n                  <img alt={data.name} src={data.image} />\n                </div>\n                <div className=\"content\">\n                  <ul>\n                    <li>\n                      <strong>Name:</strong> {data.name}\n                    </li>\n                    <li>\n                      <strong>Age:</strong> {data.age}\n                    </li>\n                    <li>\n                      <strong>Occupation:</strong> {data.occupation}\n                    </li>\n                  </ul>\n                </div>\n        \n              </div>\n            )\n        })\n        return (\n            <>\n                <Search key={this.state.id} value={this.state.search} handleInputChange ={this.searchEmployees} />\n                <Wrapper>\n                    {list}\n                </Wrapper>\n            </>\n        );\n    };\n};\n\nexport default SearchContainer;\n\n/* <Wrapper>\n{this.state.Employees.map(employee => (\n  <EmployeeCard\n  \n  id={employee.id}\n  key={employee.id}\n  name={employee.name}\n  image={employee.image}\n  age={employee.age}\n  occupation={employee.occupation}\n  />\n))}\n  </Wrapper> */","import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar/NavBar\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport SearchContainer from \"./SearchContainer\"\n\nclass App extends Component {\n\n\n\n\n  render()  {\n    return(\n      <>\n        < NavBar />\n        <SearchContainer />\n          \n      </>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}